/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package openapitools.client.apis

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import openapitools.client.models.FinancialAssets
import openapitools.client.models.Portfolio
import openapitools.client.models.Transaction

import openapitools.client.infrastructure.ApiClient
import openapitools.client.infrastructure.ApiResponse
import openapitools.client.infrastructure.ClientException
import openapitools.client.infrastructure.ClientError
import openapitools.client.infrastructure.ServerException
import openapitools.client.infrastructure.ServerError
import openapitools.client.infrastructure.MultiValueMap
import openapitools.client.infrastructure.RequestConfig
import openapitools.client.infrastructure.RequestMethod
import openapitools.client.infrastructure.ResponseType
import openapitools.client.infrastructure.Success

class ProductionApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://virtserver.swaggerhub.com/GMCORDEIRO.inf/Investimentos/1.0.0")
        }
    }

    /**
     * adds an Transaction itens
     * Adds an item to the system
     * @param financialAssets Portfólio item to add (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun addAssets(financialAssets: FinancialAssets? = null) : Unit {
        val localVarResponse = addAssetsWithHttpInfo(financialAssets = financialAssets)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * adds an Transaction itens
     * Adds an item to the system
     * @param financialAssets Portfólio item to add (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun addAssetsWithHttpInfo(financialAssets: FinancialAssets?) : ApiResponse<Unit?> {
        val localVariableConfig = addAssetsRequestConfig(financialAssets = financialAssets)

        return request<FinancialAssets, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation addAssets
     *
     * @param financialAssets Portfólio item to add (optional)
     * @return RequestConfig
     */
    fun addAssetsRequestConfig(financialAssets: FinancialAssets?) : RequestConfig<FinancialAssets> {
        val localVariableBody = financialAssets
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/asset",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * adds an portfolio itens
     * Adds an item to the system
     * @param portfolio Portfólio item to add (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun addPortfolio(portfolio: Portfolio? = null) : Unit {
        val localVarResponse = addPortfolioWithHttpInfo(portfolio = portfolio)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * adds an portfolio itens
     * Adds an item to the system
     * @param portfolio Portfólio item to add (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun addPortfolioWithHttpInfo(portfolio: Portfolio?) : ApiResponse<Unit?> {
        val localVariableConfig = addPortfolioRequestConfig(portfolio = portfolio)

        return request<Portfolio, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation addPortfolio
     *
     * @param portfolio Portfólio item to add (optional)
     * @return RequestConfig
     */
    fun addPortfolioRequestConfig(portfolio: Portfolio?) : RequestConfig<Portfolio> {
        val localVariableBody = portfolio
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/portfolio",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * adds an financial assets itens
     * Adds an item to the system
     * @param transaction Portfólio item to add (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun addTransactions(transaction: Transaction? = null) : Unit {
        val localVarResponse = addTransactionsWithHttpInfo(transaction = transaction)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * adds an financial assets itens
     * Adds an item to the system
     * @param transaction Portfólio item to add (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun addTransactionsWithHttpInfo(transaction: Transaction?) : ApiResponse<Unit?> {
        val localVariableConfig = addTransactionsRequestConfig(transaction = transaction)

        return request<Transaction, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation addTransactions
     *
     * @param transaction Portfólio item to add (optional)
     * @return RequestConfig
     */
    fun addTransactionsRequestConfig(transaction: Transaction?) : RequestConfig<Transaction> {
        val localVariableBody = transaction
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/transaction",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * searches financial assets
     * By passing in the appropriate options, you can search for available inventory in the system 
     * @param assetID pass a opcional ID for search (optional)
     * @param assetTicket pass a opcional ticket for search (optional)
     * @return kotlin.collections.List<FinancialAssets>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun searchAssets(assetID: java.util.UUID? = null, assetTicket: kotlin.String? = null) : kotlin.collections.List<FinancialAssets> {
        val localVarResponse = searchAssetsWithHttpInfo(assetID = assetID, assetTicket = assetTicket)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<FinancialAssets>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * searches financial assets
     * By passing in the appropriate options, you can search for available inventory in the system 
     * @param assetID pass a opcional ID for search (optional)
     * @param assetTicket pass a opcional ticket for search (optional)
     * @return ApiResponse<kotlin.collections.List<FinancialAssets>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun searchAssetsWithHttpInfo(assetID: java.util.UUID?, assetTicket: kotlin.String?) : ApiResponse<List<FinancialAssets>?> {
        val localVariableConfig = searchAssetsRequestConfig(assetID = assetID, assetTicket = assetTicket)

        return request<Unit, kotlin.collections.List<FinancialAssets>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation searchAssets
     *
     * @param assetID pass a opcional ID for search (optional)
     * @param assetTicket pass a opcional ticket for search (optional)
     * @return RequestConfig
     */
    fun searchAssetsRequestConfig(assetID: java.util.UUID?, assetTicket: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (assetID != null) {
                    put("Asset ID", listOf(assetID.toString()))
                }
                if (assetTicket != null) {
                    put("Asset Ticket", listOf(assetTicket.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/asset",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * searches portfolio
     * By passing in the appropriate options, you can search for available inventory in the system 
     * @param portfolioID pass a opcional ID for search (optional)
     * @return kotlin.collections.List<Portfolio>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun searchPortfolio(portfolioID: java.util.UUID? = null) : kotlin.collections.List<Portfolio> {
        val localVarResponse = searchPortfolioWithHttpInfo(portfolioID = portfolioID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<Portfolio>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * searches portfolio
     * By passing in the appropriate options, you can search for available inventory in the system 
     * @param portfolioID pass a opcional ID for search (optional)
     * @return ApiResponse<kotlin.collections.List<Portfolio>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun searchPortfolioWithHttpInfo(portfolioID: java.util.UUID?) : ApiResponse<List<Portfolio>?> {
        val localVariableConfig = searchPortfolioRequestConfig(portfolioID = portfolioID)

        return request<Unit, kotlin.collections.List<Portfolio>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation searchPortfolio
     *
     * @param portfolioID pass a opcional ID for search (optional)
     * @return RequestConfig
     */
    fun searchPortfolioRequestConfig(portfolioID: java.util.UUID?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (portfolioID != null) {
                    put("Portfolio ID", listOf(portfolioID.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/portfolio",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * searches Transactions
     * By passing in the appropriate options, you can search for available inventory in the system 
     * @param assetID pass a opcional ID for search (optional)
     * @param transactionID pass a opcional ticket for search (optional)
     * @return kotlin.collections.List<Transaction>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun searchTransaction(assetID: java.util.UUID? = null, transactionID: java.util.UUID? = null) : kotlin.collections.List<Transaction> {
        val localVarResponse = searchTransactionWithHttpInfo(assetID = assetID, transactionID = transactionID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<Transaction>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * searches Transactions
     * By passing in the appropriate options, you can search for available inventory in the system 
     * @param assetID pass a opcional ID for search (optional)
     * @param transactionID pass a opcional ticket for search (optional)
     * @return ApiResponse<kotlin.collections.List<Transaction>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun searchTransactionWithHttpInfo(assetID: java.util.UUID?, transactionID: java.util.UUID?) : ApiResponse<List<Transaction>?> {
        val localVariableConfig = searchTransactionRequestConfig(assetID = assetID, transactionID = transactionID)

        return request<Unit, kotlin.collections.List<Transaction>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation searchTransaction
     *
     * @param assetID pass a opcional ID for search (optional)
     * @param transactionID pass a opcional ticket for search (optional)
     * @return RequestConfig
     */
    fun searchTransactionRequestConfig(assetID: java.util.UUID?, transactionID: java.util.UUID?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (assetID != null) {
                    put("Asset ID", listOf(assetID.toString()))
                }
                if (transactionID != null) {
                    put("Transaction ID", listOf(transactionID.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/transaction",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
